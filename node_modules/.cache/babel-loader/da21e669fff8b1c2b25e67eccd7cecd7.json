{"ast":null,"code":"import _toConsumableArray from\"/Users/PrakharGupta/Major-1/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/PrakharGupta/Major-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/PrakharGupta/Major-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from'react';import moment from'moment';import'./ChatBox.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatBox=function ChatBox(_ref){var socketRef=_ref.socketRef,username=_ref.username;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),feedback=_useState6[0],setFeedback=_useState6[1];// state for typing feedback\nvar messageContainerRef=useRef(null);var sendMessage=function sendMessage(){if(!message)return;var messageData={name:username,message:message,dateTime:new Date()};socketRef.current.emit('message',messageData);addMessageToUI(true,messageData);setMessage('');};var addMessageToUI=function addMessageToUI(isOwnMessage,data){var newMessage=_objectSpread(_objectSpread({},data),{},{isOwnMessage:isOwnMessage});setMessages(function(prevMessages){return[].concat(_toConsumableArray(prevMessages),[newMessage]);});};var scrollToBottom=function scrollToBottom(){if(messageContainerRef.current){messageContainerRef.current.scrollTop=messageContainerRef.current.scrollHeight;}};useEffect(function(){if(socketRef.current){socketRef.current.on('chat-message',function(data){addMessageToUI(false,data);});socketRef.current.on('feedback',function(data){setFeedback(data.feedback);// update feedback when someone is typing\n});}scrollToBottom();},[messages]);// Handle typing feedback\nvar handleTyping=function handleTyping(){socketRef.current.emit('feedback',{feedback:\"\".concat(username,\" is typing...\")});};useEffect(function(){var messageInput=document.getElementById('message-input');if(messageInput){messageInput.addEventListener('keypress',handleTyping);messageInput.addEventListener('focusout',function(){socketRef.current.emit('feedback',{feedback:''});});}// Cleanup event listeners on component unmount\nreturn function(){if(messageInput){messageInput.removeEventListener('keypress',handleTyping);messageInput.removeEventListener('focusout',function(){socketRef.current.emit('feedback',{feedback:''});});}};},[]);var handleInput=function handleInput(e){return setMessage(e.target.value);};var handleSubmit=function handleSubmit(e){e.preventDefault();sendMessage();socketRef.current.emit('feedback',{feedback:''});// clear feedback on send\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatBox\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"messages\",ref:messageContainerRef,children:[messages.map(function(msg,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(msg.isOwnMessage?'own':'other'),children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:msg.name}),\": \",msg.message]}),/*#__PURE__*/_jsx(\"span\",{children:moment(msg.dateTime).fromNow()})]},index);}),feedback&&/*#__PURE__*/_jsx(\"p\",{className:\"typing-feedback\",children:feedback})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{id:\"message-input\",type:\"text\",value:message,onChange:handleInput,placeholder:\"Type a message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});};export default ChatBox;","map":{"version":3,"sources":["/Users/PrakharGupta/Major-1/src/components/ChatBox.js"],"names":["React","useState","useEffect","useRef","moment","ChatBox","socketRef","username","message","setMessage","messages","setMessages","feedback","setFeedback","messageContainerRef","sendMessage","messageData","name","dateTime","Date","current","emit","addMessageToUI","isOwnMessage","data","newMessage","prevMessages","scrollToBottom","scrollTop","scrollHeight","on","handleTyping","messageInput","document","getElementById","addEventListener","removeEventListener","handleInput","e","target","value","handleSubmit","preventDefault","map","msg","index","fromNow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport './ChatBox.css';\n\nconst ChatBox = ({ socketRef, username }) => {\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [feedback, setFeedback] = useState(''); // state for typing feedback\n    const messageContainerRef = useRef(null);\n\n    const sendMessage = () => {\n        if (!message) return;\n        const messageData = {\n            name: username,\n            message,\n            dateTime: new Date(),\n        };\n        socketRef.current.emit('message', messageData);\n        addMessageToUI(true, messageData);\n        setMessage('');\n    };\n\n    const addMessageToUI = (isOwnMessage, data) => {\n        const newMessage = {\n            ...data,\n            isOwnMessage,\n        };\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\n    };\n\n    const scrollToBottom = () => {\n        if (messageContainerRef.current) {\n            messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n        }\n    };\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on('chat-message', (data) => {\n                addMessageToUI(false, data);\n            });\n\n            socketRef.current.on('feedback', (data) => {\n                setFeedback(data.feedback); // update feedback when someone is typing\n            });\n        }\n        scrollToBottom();\n    }, [messages]);\n\n    // Handle typing feedback\n    const handleTyping = () => {\n        socketRef.current.emit('feedback', {\n            feedback: `${username} is typing...`,\n        });\n    };\n\n    useEffect(() => {\n        const messageInput = document.getElementById('message-input');\n        if (messageInput) {\n            messageInput.addEventListener('keypress', handleTyping);\n            messageInput.addEventListener('focusout', () => {\n                socketRef.current.emit('feedback', { feedback: '' });\n            });\n        }\n\n        // Cleanup event listeners on component unmount\n        return () => {\n            if (messageInput) {\n                messageInput.removeEventListener('keypress', handleTyping);\n                messageInput.removeEventListener('focusout', () => {\n                    socketRef.current.emit('feedback', { feedback: '' });\n                });\n            }\n        };\n    }, []);\n\n    const handleInput = (e) => setMessage(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        sendMessage();\n        socketRef.current.emit('feedback', { feedback: '' }); // clear feedback on send\n    };\n\n    return (\n        <div className=\"chatBox\">\n            <div className=\"messages\" ref={messageContainerRef}>\n                {messages.map((msg, index) => (\n                    <div\n                        key={index}\n                        className={`message ${msg.isOwnMessage ? 'own' : 'other'}`}\n                    >\n                        <p>\n                            <strong>{msg.name}</strong>: {msg.message}\n                        </p>\n                        <span>{moment(msg.dateTime).fromNow()}</span>\n                    </div>\n                ))}\n                {feedback && <p className=\"typing-feedback\">{feedback}</p>}\n            </div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    id=\"message-input\"\n                    type=\"text\"\n                    value={message}\n                    onChange={handleInput}\n                    placeholder=\"Type a message...\"\n                />\n                <button type=\"submit\">Send</button>\n            </form>\n        </div>\n    );\n};\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}