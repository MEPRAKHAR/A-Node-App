{"ast":null,"code":"import _slicedToArray from\"/Users/PrakharGupta/Major-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect}from'react';import io from'socket.io-client';export function useSocket(roomId){var _React$useState=React.useState(null),_React$useState2=_slicedToArray(_React$useState,2),socket=_React$useState2[0],setSocket=_React$useState2[1];useEffect(function(){var options={forceNewConnection:true,reconnectionAttempt:'Infinity',timeout:10000,transports:['websocket']};var newSocket=io(process.env.REACT_APP_BACKEND_URL,options);setSocket(newSocket);return function(){if(newSocket){newSocket.disconnect();}};},[]);return socket;}","map":{"version":3,"sources":["/Users/PrakharGupta/Major-1/src/socket.js"],"names":["React","useEffect","io","useSocket","roomId","useState","socket","setSocket","options","forceNewConnection","reconnectionAttempt","timeout","transports","newSocket","process","env","REACT_APP_BACKEND_URL","disconnect"],"mappings":"iHAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CAEA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,MAAnB,CAA2B,CAChC,oBAA4BJ,KAAK,CAACK,QAAN,CAAe,IAAf,CAA5B,oDAAOC,MAAP,qBAAeC,SAAf,qBAEAN,SAAS,CAAC,UAAM,CACd,GAAMO,CAAAA,OAAO,CAAG,CACdC,kBAAkB,CAAE,IADN,CAEdC,mBAAmB,CAAE,UAFP,CAGdC,OAAO,CAAE,KAHK,CAIdC,UAAU,CAAE,CAAC,WAAD,CAJE,CAAhB,CAOA,GAAMC,CAAAA,SAAS,CAAGX,EAAE,CAACY,OAAO,CAACC,GAAR,CAAYC,qBAAb,CAAoCR,OAApC,CAApB,CAEAD,SAAS,CAACM,SAAD,CAAT,CAEA,MAAO,WAAM,CACX,GAAIA,SAAJ,CAAe,CACbA,SAAS,CAACI,UAAV,GACD,CACF,CAJD,CAKD,CAjBQ,CAiBN,EAjBM,CAAT,CAmBA,MAAOX,CAAAA,MAAP,CACD","sourcesContent":["import React, { useEffect } from 'react';\nimport io from 'socket.io-client';\n\nexport function useSocket(roomId) {\n  const [socket, setSocket] = React.useState(null);\n\n  useEffect(() => {\n    const options = {\n      forceNewConnection: true,\n      reconnectionAttempt: 'Infinity',\n      timeout: 10000,\n      transports: ['websocket'],\n    };\n\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL, options);\n\n    setSocket(newSocket);\n\n    return () => {\n      if (newSocket) {\n        newSocket.disconnect();\n      }\n    };\n  }, []);\n\n  return socket;\n}"]},"metadata":{},"sourceType":"module"}