[{"/Users/PrakharGupta/Major-1/src/index.js":"1","/Users/PrakharGupta/Major-1/src/App.js":"2","/Users/PrakharGupta/Major-1/src/reportWebVitals.js":"3","/Users/PrakharGupta/Major-1/src/pages/Home.js":"4","/Users/PrakharGupta/Major-1/src/pages/EditorPage.js":"5","/Users/PrakharGupta/Major-1/src/Actions.js":"6","/Users/PrakharGupta/Major-1/src/socket.js":"7","/Users/PrakharGupta/Major-1/src/components/chatbox.js":"8","/Users/PrakharGupta/Major-1/src/components/Editor.js":"9","/Users/PrakharGupta/Major-1/src/components/Client.js":"10","/Users/PrakharGupta/Major-1/src/components/ChatBox.js":"11"},{"size":500,"mtime":1729718431121,"results":"12","hashOfConfig":"13"},{"size":1014,"mtime":1731064473267,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1728465266886,"results":"15","hashOfConfig":"13"},{"size":2809,"mtime":1728669749889,"results":"16","hashOfConfig":"13"},{"size":4785,"mtime":1731424857153,"results":"17","hashOfConfig":"13"},{"size":202,"mtime":1729718431120,"results":"18","hashOfConfig":"13"},{"size":309,"mtime":1731057262531,"results":"19","hashOfConfig":"13"},{"size":688,"mtime":1728465266885,"results":"20","hashOfConfig":"13"},{"size":1918,"mtime":1731064399271,"results":"21","hashOfConfig":"13"},{"size":312,"mtime":1728465266885,"results":"22","hashOfConfig":"13"},{"size":3300,"mtime":1731423445973,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sjrvme",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"/Users/PrakharGupta/Major-1/src/index.js",[],[],"/Users/PrakharGupta/Major-1/src/App.js",[],[],"/Users/PrakharGupta/Major-1/src/reportWebVitals.js",[],[],"/Users/PrakharGupta/Major-1/src/pages/Home.js",["60"],[],"import React, { useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\nconst Home = () => {\n    const navigate = useNavigate();\n\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n    };\n\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('ROOM ID & username is required');\n            return;\n        }\n\n        // Redirect\n        navigate(`/editor/${roomId}`, {\n            state: {\n                username,\n            },\n        });\n    };\n\n    const handleInputEnter = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    };\n    return (\n        <div className=\"homePageWrapper\">\n            <div className=\"formWrapper\">\n            <div className=\"logo-container\">\n                  <img src = \"/codemate.jpg\" className=\"logo-home\" />\n                </div>\n                <h4 className=\"mainLabel\">Paste ROOM ID</h4>\n                <div className=\"inputGroup\">\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"ROOM ID\"\n                        onChange={(e) => setRoomId(e.target.value)}\n                        value={roomId}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"USERNAME\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        value={username}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\n                        Join\n                    </button>\n                    <span className=\"createInfo\">\n                        If you don't have an invite then create &nbsp;\n                        <a\n                            onClick={createNewRoom}\n                            href=\"/create-room\"\n                            className=\"createNewBtn\"\n                        >\n                            new room\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <footer>\n            <h4>\n            Built with <span role=\"img\" aria-label=\"love\">ðŸ’›</span> by <a href=\"https://github.com/MEPRAKHAR\">Prakhar</a> & <a href=\"https://github.com/ikigai0822\">Pranay</a>\n\n            </h4>\n            </footer>\n        </div>\n    );\n};\n\nexport default Home;\n","/Users/PrakharGupta/Major-1/src/pages/EditorPage.js",["61"],[],"/Users/PrakharGupta/Major-1/src/Actions.js",[],[],"/Users/PrakharGupta/Major-1/src/socket.js",[],[],"/Users/PrakharGupta/Major-1/src/components/chatbox.js",[],[],"/Users/PrakharGupta/Major-1/src/components/Editor.js",["62","63"],[],"import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/python/python';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange, selectedLanguage }) => {\n    const editorRef = useRef(null);\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: selectedLanguage, json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, [socketRef, roomId, onCodeChange, selectedLanguage]);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n","/Users/PrakharGupta/Major-1/src/components/Client.js",[],[],"/Users/PrakharGupta/Major-1/src/components/ChatBox.js",["64"],[],"// src/components/ChatBox.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport moment from 'moment';\nimport './ChatBox.css';\n\nconst ChatBox = ({ socketRef, username, roomId }) => {\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [feedback, setFeedback] = useState('');\n    const messageContainerRef = useRef(null);\n\n    const sendMessage = () => {\n        if (!message) return;\n        const messageData = {\n            name: username,\n            message,\n            dateTime: new Date(),\n            roomId, // Include roomId in the message data\n        };\n        socketRef.current.emit('message', messageData); // Emit message to server\n        addMessageToUI(true, messageData);\n        setMessage('');\n    };\n\n    const addMessageToUI = (isOwnMessage, data) => {\n        const newMessage = {\n            ...data,\n            isOwnMessage,\n        };\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\n    };\n\n    // Emit feedback when user types in input\n    const handleTyping = () => {\n        if (message) {\n            socketRef.current.emit('feedback', { feedback: `${username} is typing...`, roomId });\n        } else {\n            socketRef.current.emit('feedback', { feedback: '', roomId });\n        }\n    };\n\n    useEffect(() => {\n        if (socketRef.current) {\n            // Listen for incoming chat messages and display them\n            socketRef.current.on('chat-message', (data) => {\n                addMessageToUI(false, data);\n            });\n\n            // Listen for typing feedback and update the feedback state\n            socketRef.current.on('feedback', (data) => {\n                setFeedback(data.feedback);\n            });\n        }\n\n        // Scroll to the bottom of the messages container whenever new messages arrive\n        if (messageContainerRef.current) {\n            messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    const handleInput = (e) => setMessage(e.target.value);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        sendMessage();\n    };\n\n    return (\n        <div className=\"chatBox\">\n            <div className=\"messages\" ref={messageContainerRef}>\n                {messages.map((msg, index) => (\n                    <div\n                        key={index}\n                        className={`message ${msg.isOwnMessage ? 'own' : 'other'}`}\n                    >\n                        <p>\n                            <strong>{msg.name}</strong>: {msg.message}\n                        </p>\n                        <span>{moment(msg.dateTime).fromNow()}</span>\n                    </div>\n                ))}\n            </div>\n            {feedback && <div className=\"typing-feedback\">{feedback}</div>}\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={message}\n                    onChange={handleInput}\n                    placeholder=\"Type a message...\"\n                    onKeyUp={handleTyping} // Call handleTyping on keyup to emit feedback\n                />\n                <button type=\"submit\">Send</button>\n            </form>\n        </div>\n    );\n};\n\nexport default ChatBox;\n",{"ruleId":"65","severity":1,"message":"66","line":41,"column":19,"nodeType":"67","endLine":41,"endColumn":70},{"ruleId":"68","severity":1,"message":"69","line":64,"column":8,"nodeType":"70","endLine":64,"endColumn":10,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":51,"column":23,"nodeType":"73","endLine":51,"endColumn":30},{"ruleId":"68","severity":1,"message":"74","line":53,"column":8,"nodeType":"70","endLine":53,"endColumn":27,"suggestions":"75"},{"ruleId":"68","severity":1,"message":"76","line":59,"column":8,"nodeType":"70","endLine":59,"endColumn":18,"suggestions":"77"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["78"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["79"],"React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array.",["80"],{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [location.state?.username, reactNavigator, roomId]",{"range":"87","text":"88"},"Update the dependencies array to be: [socketRef]",{"range":"89","text":"90"},"Update the dependencies array to be: [messages, socketRef]",{"range":"91","text":"92"},[2396,2398],"[location.state?.username, reactNavigator, roomId]",[1814,1833],"[socketRef]",[2006,2016],"[messages, socketRef]"]